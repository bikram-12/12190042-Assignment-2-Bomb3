gcit@gcit2021:~/Downloads/Assignment 1/bomb003$ gdb bomb
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from bomb...
(gdb) b phase_5
Breakpoint 1 at 0x40106d
(gdb) r ans.txt
Starting program: /home/gcit/Downloads/Assignment 1/bomb003/bomb ans.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
0 1 1 2 3 5
That's number 2.  Keep going!
2 798
Halfway there!
4 2
So you got that one.  Try this one.
2 4

Breakpoint 1, 0x000000000040106d in phase_5 ()
(gdb) disas phase_5
Dump of assembler code for function phase_5:
=> 0x000000000040106d <+0>:	sub    $0x18,%rsp
   0x0000000000401071 <+4>:	mov    %fs:0x28,%rax
   0x000000000040107a <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040107f <+18>:	xor    %eax,%eax
   0x0000000000401081 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401086 <+25>:	mov    %rsp,%rdx
   0x0000000000401089 <+28>:	mov    $0x4025af,%esi
   0x000000000040108e <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401093 <+38>:	cmp    $0x1,%eax
   0x0000000000401096 <+41>:	jg     0x40109d <phase_5+48>
   0x0000000000401098 <+43>:	callq  0x40142a <explode_bomb>
   0x000000000040109d <+48>:	mov    (%rsp),%eax
   0x00000000004010a0 <+51>:	and    $0xf,%eax
   0x00000000004010a3 <+54>:	mov    %eax,(%rsp)
   0x00000000004010a6 <+57>:	cmp    $0xf,%eax
   0x00000000004010a9 <+60>:	je     0x4010da <phase_5+109>
   0x00000000004010ab <+62>:	mov    $0x0,%ecx
   0x00000000004010b0 <+67>:	mov    $0x0,%edx
   0x00000000004010b5 <+72>:	add    $0x1,%edx
   0x00000000004010b8 <+75>:	cltq   
   0x00000000004010ba <+77>:	mov    0x402460(,%rax,4),%eax
   0x00000000004010c1 <+84>:	add    %eax,%ecx
--Type <RET> for more, q to quit, c to continue without paging--
   0x00000000004010c3 <+86>:	cmp    $0xf,%eax
   0x00000000004010c6 <+89>:	jne    0x4010b5 <phase_5+72>
   0x00000000004010c8 <+91>:	movl   $0xf,(%rsp)
   0x00000000004010cf <+98>:	cmp    $0xf,%edx
   0x00000000004010d2 <+101>:	jne    0x4010da <phase_5+109>
   0x00000000004010d4 <+103>:	cmp    0x4(%rsp),%ecx
   0x00000000004010d8 <+107>:	je     0x4010df <phase_5+114>
   0x00000000004010da <+109>:	callq  0x40142a <explode_bomb>
   0x00000000004010df <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010e4 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010ed <+128>:	je     0x4010f4 <phase_5+135>
   0x00000000004010ef <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x00000000004010f4 <+135>:	add    $0x18,%rsp
   0x00000000004010f8 <+139>:	retq   
End of assembler dump.
(gdb) u* 0x0000000000401089
0x0000000000401089 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040106d <+0>:	sub    $0x18,%rsp
   0x0000000000401071 <+4>:	mov    %fs:0x28,%rax
   0x000000000040107a <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040107f <+18>:	xor    %eax,%eax
   0x0000000000401081 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401086 <+25>:	mov    %rsp,%rdx
=> 0x0000000000401089 <+28>:	mov    $0x4025af,%esi //esi = "%d %d"
   0x000000000040108e <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401093 <+38>:	cmp    $0x1,%eax  // compare %eax with 1 to check whether the input length is 2.
   0x0000000000401096 <+41>:	jg     0x40109d <phase_5+48>
   0x0000000000401098 <+43>:	callq  0x40142a <explode_bomb>
   0x000000000040109d <+48>:	mov    (%rsp),%eax  //move %rsp that is the first user input to eax.
   0x00000000004010a0 <+51>:	and    $0xf,%eax   
   0x00000000004010a3 <+54>:	mov    %eax,(%rsp)
   0x00000000004010a6 <+57>:	cmp    $0xf,%eax  // cmopare %eax with 0 to check whether the first input is in the range 0 - 14
   0x00000000004010a9 <+60>:	je     0x4010da <phase_5+109>
   0x00000000004010ab <+62>:	mov    $0x0,%ecx
   0x00000000004010b0 <+67>:	mov    $0x0,%edx
   0x00000000004010b5 <+72>:	add    $0x1,%edx  // we are trying to increment the value  of %edx by 1.
   0x00000000004010b8 <+75>:	cltq   
   0x00000000004010ba <+77>:	mov    0x402460(,%rax,4),%eax  //we are moving the element stored in array of address 0x402460+rax multiplied by 4 to %eax.
   0x00000000004010c1 <+84>:	add    %eax,%ecx  //add %ecx to %eax; %eax = 0x402460x*4 + %ecx;
--Type <RET> for more, q to quit, c to continue without paging--
   0x00000000004010c3 <+86>:	cmp    $0xf,%eax //here we are comparing and finding whether the given value of %eax = 15, where it is one of the element inside the array, 
						//if it is equal, then we can go outside the loop.
   0x00000000004010c6 <+89>:	jne    0x4010b5 <phase_5+72> // jump to line <+72> for iteration.
   0x00000000004010c8 <+91>:	movl   $0xf,(%rsp)
   0x00000000004010cf <+98>:	cmp    $0xf,%edx //compare and see whether the iteration has occured exectly 15 times, if not jump to line<+109> which leds to explode bomb.
   0x00000000004010d2 <+101>:	jne    0x4010da <phase_5+109>
   0x00000000004010d4 <+103>:	cmp    0x4(%rsp),%ecx  comapre and see whether the second user input is equals to the sum of the element in the array in %ecx.
   0x00000000004010d8 <+107>:	je     0x4010df <phase_5+114>
   0x00000000004010da <+109>:	callq  0x40142a <explode_bomb>
   0x00000000004010df <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010e4 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010ed <+128>:	je     0x4010f4 <phase_5+135>
   0x00000000004010ef <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x00000000004010f4 <+135>:	add    $0x18,%rsp
   0x00000000004010f8 <+139>:	retq  

Conclusion :
From the above assembly code as we input the first digit,the first digit should be an array index, with each element in that index acting as an index to another element.
So, until the indicated element is 15, the index will point to all the elements in the array except the digit that the user has specified in the loop.
It will total up all indicated components as it iterates, which should equal the second user input. As a result, the two digits might be 5, 115..
 
End of assembler dump.
(gdb) x/s 0x4025af
0x4025af:	"%d %d"
(gdb) 
[3]+  Stopped                 gdb bomb
gcit@gcit2021:~/Downloads/Assignment 1/bomb003$ gdb bomb
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from bomb...
(gdb) r ans.txt
Starting program: /home/gcit/Downloads/Assignment 1/bomb003/bomb ans.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
0 1 1 2 3 5
That's number 2.  Keep going!
2 798
Halfway there!
4 2
So you got that one.  Try this one.
5 115
Good work!  On to the next...


